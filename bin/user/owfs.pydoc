Help on module owfs:

NAME
    owfs - Classes and functions for interfacing with one-wire sensors via owfs.

FILE
    /home/graybeard/git-masterofpis/weewx-owfs/bin/user/owfs.py

DESCRIPTION
    ow-python documents can be found at http://owfs.sourceforge.net/owpython.html
    OWFS main site https://owfs.org
    
    or find the code locally. eg:-
    /usr/lib/python2.7/dist-packages/ow/__init__.py
    
    This file contains both a weewx driver and a weewx service.  Either will
    read raw data from owfs, then the weewx calibration can be used to adjust
    raw values as needed.  Mapping from one-wire device and attribute to weewx
    database field is done in the OWFS section of weewx.conf.
    
    This module requires either the python bindings for owfs, or the pyownet
    module which requires owserver.
    
    ====
    
    For python-ow (owbinding):
    
    The owfs software itself can be installed if you like, but it is not necessary;
    the owftpd, owhttpd, and owserver services are not used and do not need to be
    running.  In fact, it is safer to leave those services disabled to ensure that
    they do not conflict with weewx when it attempts to read one-wire devices.
    
    On debian systems, install the python bindings with something like this:
    
    
    python2.7 for weewx versions <= 3.9.2
    sudo apt-get install python-ow
    
    python3.x for weewx versions > 4
    ( if it is available, it's now missing from a few distros.)
    sudo apt install python3-ow
    
    then in weewx.conf you will use the following...
    [OWFS]
        interface = u
        driver = user.owfs
        [[sensor_map]]
            inTemp = /uncached/28.8A071E050000/temperature
    
    ====
    
    For pyownet (ownetbinding)
    
    The owfs software is required when using this module. The owserver is essential
    and owshell may be helpful.
    
    python2.7 for weewx versions <= 3.9.2
    sudo apt-get install owserver
    sudo apt-get install pyownet
    
    python3.x for weewx versions > 4
    sudo apt-get install owserver
    pip3 install pyownet (if it is not available via apt-get )
    
    then in weewx.conf you will use the following...
    [OWFS]
        driver = user.owfs
        [[sensor_map]]
            inTemp = /uncached/28.8A071E050000/temperature
    
    To configure the owserver, move aside the contents of /etc/owfs.conf and create
    a new file with the contents as follows, and uncommenting one of the first 3
    device entries...
    
    #! server: server = localhost:4304
    #server: usb = all # for a DS9490
    #server: device = /dev/ttyS1 # for a serial port
    #server: device /dev/i2c-1 # for a pi using i2c-1
    server: port = 4304
    
    =======
    
    Owserver and systemd.
    
    Running owserver under systemd. (This applies to the majority of recent
    linux distributions.)
    
    A problem that has been occuring with owserver on Debian Buster installs
    is a refusal to start and run. There's no rhyme or reason to it, and it
    magically fixes itself. ?
    
    The following post describes a possible fix for that problem.
    
    https://sourceforge.net/p/owfs/mailman/message/36765345/
    part of...
    https://sourceforge.net/p/owfs/mailman/owfs-developers/?viewmonth=201909
    
    In summary, and quoting an extract from the above post ...
    
    "/etc/systemd/system/owserver.service.d/override.conf is an override
    file, that you create with"
    sudo systemctl edit owserver.service
    
    then add the following content...
    
    # /etc/systemd/system/owserver.service.d/override.conf
    [Service]
    User=Debian-ow
    Group=Debian-ow
    ExecStart=
    ExecStart=/usr/bin/owserver -c /etc/owfs.conf --foreground
    
    [Install]
    Also=
    
    
    This disables the use of sockets for owserver, and brings the daemon to
    the foreground.
    Running owserver under systemd. (This applies to the majority of recent
    linux distributions.)
    
    ======
    Then proceed to the installation of this file or package
    
    Place this file, owfs.py, in the weewx 'user' directory or use wee_extension
    to install the package.
    The following manual changes will need to be noted depending on your setup.
    
    To use as a driver:
    
    [Station]
        station_type = OWFS
    
    To use as a service:
    
    [Engine]
        [[Service]]
            data_services = user.owfs.OWFSService
    
    The service can be bound to LOOP or ARCHIVE.  The default binding is archive;
    when a new archive record is created, this service is invoked to collect data
    from the one-wire bus.  The other option is loop binding; when loop data are
    collected, this service is invoked to collect data from the one-wire bus.
    
    Beware that a slow one-wire bus can adversely affect the performance and
    behavior of weewx, especially when using loop binding.
    
    Use the binding parameter to indicate LOOP or ARCHIVE binding.  For example,
    
    [OWFS]
        binding = loop
    
    Only numeric sensor values are supported.
    
    By default, data from each sensor are treated as gauge.  Data types include:
    
      gauge - record the value as it is read from the sensor
      delta - difference between current and last reading
      average - time average by calculating the delta divided by time period
      counter - difference between current and last, always increasing
    
    By default, the units of the sensors is assumed to be metric.  If the sensors
    have been configured to output in US units, use the unit_system option.  For
    example,
    
    [OWFS]
        unit_system = US
    
    The interface indicates where the one-wire devices are attached.  The default
    value is u, which is shorthand for 'usb'.  This is the option to use for a
    DS9490R USB adaptor.  Other options include a serial port such as /dev/ttyS0,
    or remote_system:3003 to get data from a remote host running owserver.  For
    example,
    
    [OWFS]
        interface = /dev/ttyS0 # for a serial port
    
    [OWFS]
        interface = /dev/i2c-1 # for a pi using the i2c interface
    
    The sensor map is simply a list of database field followed by full path to the
    desired sensor reading.  Only sensor values that can be converted to float
    are supported at this time.
    
    Some devices support caching.  To use raw, uncached values, preface the path
    with /uncached.
    
    To find out what devices are actually attached:
    
     sudo PYTHONPATH=/home/weewx/bin python /home/weewx/bin/user/owfs.py --sensors
    
    To display the names of data fields for each sensor, as well as actual data:
    
     sudo PYTHONPATH=/home/weewx/bin python /home/weewx/bin/user/owfs.py --readings
    
    To display the value from a single sensor:
    
     sudo PYTHONPATH=bin python bin/user/owfs.py --reading /path/to/sensor
    
    Details about the python bindings are at the owfs project on sourceforge:
    
      http://owfs.sourceforge.net/owpython.html
    
    Example Configurations
    
    AAG TAI8515 V3 weather station
    
    [OWFS]
        [[sensor_map]]
            outTemp = /uncached/XX.YYYYYYYYYYYY/temperature
            windDir = /uncached/XX.YYYYYYYYYYYY              # volt.ALL
            windSpeed = /uncached/XX.YYYYYYYYYYYY            # counters.A
        [[sensor_type]]
            windDir = aag_windvane
            windSpeed = aag_windspeed
    
    Hobby-Boards ADS wind instrument, lightning sensor, solar radiation
    sensor, and rainwise rain instrument
    
    [OWFS]
        [[sensor_map]]
            inTemp = /XX.YYYYYYYYYYYY/temperature
            UV = /XX.YYYYYYYYYYYY/UVI/UVI
            luminosity = /XX.YYYYYYYYYYYY/S3-R1-A/luminosity
            lightning = /XX.YYYYYYYYYYYY/counters.A
            rain = /XX.YYYYYYYYYYYY                          # counters.B
            windDir = /XX.YYYYYYYYYYYY                       # VAD
            windSpeed = /XX.YYYYYYYYYYYY                     # counters.A
        [[sensor_type]]
            lightning = counter
            rain = rainwise_bucket
            windDir = ads_windvane
            windSpeed = ads_windspeed
    
    [StdCalibrate]
        [[Corrections]]
            radiation = luminosity * 1.730463
    
    Hobby-Boards with Inspeed wind instrument
    
    [OWFS]
        [[sensor_map]]
            windDir = /XX.YYYYYYYYYYYY                       # VAD / VDD
            windSpeed = /XX.YYYYYYYYYYYY                     # counters.A
        [[sensor_type]]
            windDir = inspeed_windvane
            windSpeed = inspeed_windspeed
    
    DALLAS Weathervane
    
    [OWFS]
    
        [[sensor_map]]
            outTemp = /XX.YYYYYYYYYYYY/temperature
            inTemp = /XX.YYYYYYYYYYYY/temperature
            windDir = XX.YYYYYYYYYYYY
            windSpeed = /XX.YYYYYYYYYYYY
            rain = /XX.YYYYYYYYYYYY/counters.A
    
        [[sensor_type]]
            windDir = dallas_windvane
            windSpeed = aag_windspeed
            rain = rainwise_bucket
    
        [[sensor_direction]]
            XX.YYYYYYYYYYYY = 360
            XX.YYYYYYYYYYYY = 45
            XX.YYYYYYYYYYYY = 90
            XX.YYYYYYYYYYYY = 135
            XX.YYYYYYYYYYYY = 180
            XX.YYYYYYYYYYYY = 225
            XX.YYYYYYYYYYYY = 270
            XX.YYYYYYYYYYYY = 315
    
    Also, if using the Dallas instrument, read the comments in the
    dallas_winddir section below.
    
    ----
    https://github.com/weewx/weewx/wiki/WeeWX-v4-and-logging
    
    DEBUG messages
    
    [Logging]
        [[loggers]]
            [[[user.owfs-dallas]]]
                level = DEBUG
                handlers = syslog,
                propagate = 0

CLASSES
    __builtin__.object
        OWFSBinding
        OWNetBinding
    exceptions.Exception(exceptions.BaseException)
        OWError
    weewx.drivers.AbstractDevice(__builtin__.object)
        OWFSDriver
    weewx.engine.StdService(__builtin__.object)
        OWFSService
    
    class OWError(exceptions.Exception)
     |  Method resolution order:
     |      OWError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class OWFSBinding(__builtin__.object)
     |  Methods defined here:
     |  
     |  Sensor(self, path)
     |  
     |  __init__(self)
     |  
     |  finish(self)
     |  
     |  get(self, path)
     |  
     |  init(self, iface=None)
     |  
     |  put(self, path, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class OWFSDriver(weewx.drivers.AbstractDevice)
     |  Driver for one-wire sensors via owfs.
     |  
     |  Method resolution order:
     |      OWFSDriver
     |      weewx.drivers.AbstractDevice
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, **stn_dict)
     |      Initialize the driver.
     |      
     |      interface: Where to find the one-wire sensors.  Options include
     |      u, /dev/ttyS0
     |      [Required. Default is u (usb)]
     |      
     |      sensor_map: Associate sensor values with database fields.
     |      [Required]
     |      
     |      sensor_type: Indicate how data should be processed before saving.
     |      [Optional. Default is gauge]
     |      
     |      polling_interval: How often to poll for data, in seconds.
     |      [Optional. Default is 10]
     |      
     |      unit_system: The unit system the data are assumed to be in.  Can
     |      be one of 'METRIC' or 'US'.  This assumes that all sensors are
     |      reporting data in the same unit system.
     |      [Optional. Default is METRIC]
     |  
     |  closePort(self)
     |  
     |  genLoopPackets(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hardware_name
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from weewx.drivers.AbstractDevice:
     |  
     |  genArchiveRecords(self, lastgood_ts)
     |  
     |  genStartupRecords(self, last_ts)
     |  
     |  getTime(self)
     |  
     |  setTime(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from weewx.drivers.AbstractDevice:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  archive_interval
    
    class OWFSService(weewx.engine.StdService)
     |  Collect data from one-wire devices via owfs.
     |  
     |  Method resolution order:
     |      OWFSService
     |      weewx.engine.StdService
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, engine, config_dict)
     |      interface: Where to find the one-wire sensors.  Options include
     |      u, /dev/ttyS0
     |      [Required. Default is u (usb)]
     |      
     |      sensor_map: Associate sensor values with database fields.
     |      [Required]
     |      
     |      sensor_type: Indicates how data should be processed before saving.
     |      [Optional. Default is gauge]
     |  
     |  getData(self, packet)
     |      # this implementation assumes that data from one-wire sensors are metric.
     |      # if the packets to which we append are something other than metric, then
     |      # we do a conversion after we have all the data.
     |  
     |  handle_new_archive(self, event)
     |  
     |  handle_new_loop(self, event)
     |  
     |  shutDown(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from weewx.engine.StdService:
     |  
     |  bind(self, event_type, callback)
     |      Bind the specified event to a callback.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from weewx.engine.StdService:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class OWNetBinding(__builtin__.object)
     |  Methods defined here:
     |  
     |  Sensor(self, path)
     |  
     |  __init__(self)
     |  
     |  finish(self)
     |  
     |  get(self, path)
     |  
     |  init(self, iface=None)
     |  
     |  put(self, path, value)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    aag_winddir(key, path, last_data, ts)
        Calculate wind direction for AAG TAI8515 V3 wind instrument.
        Contributed by Howard Walter, based on oww C implementation.
    
    aag_windspeed(key, path, last_data, ts)
    
    ads_winddir(key, path, last_data, ts)
        Calculate wind direction for Hobby-Boards ADS wind instrument.
        Get wind direction from the VAD register fo the DS2438.
        Formula from the Hobby-Boards ADS anemometer user manual.
    
    ads_windspeed(key, path, last_data, ts)
    
    average(key, path, last_data, ts)
    
    counter(key, path, last_data, ts)
    
    dallas_winddir(key, path, last_data, ts, **kwargs)
        https://groups.google.com/d/topic/weewx-user/tj0n9uYUL20/discussion
        The Original Dallas wind vane has DS2401 sensors...
        https://web.archive.org/web/20061018205111/http://archives.sensorsmag.com/articles/0698/wir0698/
        The addresses of the DS2401's need to be found and
        recorded in weewx.conf as the example below shows.
        
        Also a sensor_type of windDir = dallas_windvane and
        and sensor_map entry of windDir = /XX.XXXXXXXXXXXX
        A sensor_direction section also needs to be added where
        each sensor is mapped to its direction in degrees.
        With that done the dallas_windvane code can begin to detect
        the actual DS2401 addresses.
        
        The OWFS section will be formatted something like this.
        The actual address values will be changed to suit yours.
        
        [OWFS]
            interface = localhost:4304  # or as suits your installation.
            driver = user.owfs
        
            [[sensor_type]]
                windDir = dallas_windvane
                windSpeed = aag_windspeed
                rain = rainwise_bucket
        
            [[sensor_map]]
                outTemp = /uncached/XX.YYYYYYYYYYYY/temperature
                inTemp = /uncached/XX.YYYYYYYYYYYY/temperature
                windDir = /12.5EAB0D000000
                windSpeed = /uncached/XX.YYYYYYYYYYYY
                rain = /uncached/XX.YYYYYYYYYYYY/counters.A
        
            [[sensor_direction]]
                01.B5374A040000 = 360
                01.B2374A040000 = 45
                01.BA374A040000 = 90
                01.B7374A040000 = 135
                01.C6374A040000 = 180
                01.C3374A040000 = 225
                01.BD374A040000 = 270
                01.AE374A040000 = 315
        
        
        The values in the above example configuration would involve running
        the following in a terminal. (adjust paths if required)
        
        cd /home/weewx
        PYTHONPATH=bin python  bin/user/owfs.py --iface=localhost:4304 --sensors
        id B2374A040000: path /01.B2374A040000 s._type DS2401
        
        Take a note of the path returned for any DS2401 sensor and match it
        to a physical direction. Ignore the instances that might return 2
        sensors, they are the intermediate points and are calculated by the
        software function.
        Rotate the Dallas weather vane manually to the next compass point
        (1 of 8 : N, NW, W etc ) Again, the intermediate points (ENE, WSW etc)
        are calculated within the driver section.
        Rinse repeat for the 8 *cardinal points.
        
        Make a note of where North points on your unit. It's arbitary but once
        you're up the ladder, you'll want to know it!
    
    delta(key, path, last_data, ts)
    
    gauge(key, path, last_data, ts)
    
    get_float(path)
    
    inspeed_winddir(key, path, last_data, ts)
        Calculate wind direction for Hobby-Boards Inspeed wind instrument.
        Get wind direction from the VDD and VAD register of DS2438.
        Formula from the Hobby-Boards Inspeed anemometer user manual.
    
    inspeed_windspeed(key, path, last_data, ts)
    
    loader(config_dict, engine)
    
    logdbg(msg)
    
    logerr(msg)
    
    loginf(msg)
    
    rain_withpath(key, path, last_data, ts)
    
    rainwise_bucket(key, path, last_data, ts)

DATA
    DRIVER_NAME = 'OWFS-gmck'
    DRIVER_VERSION = '0.23.7 (ow)'
    SENSOR_TYPES = {'aag_windspeed': <function aag_windspeed>, 'aag_windva...
    log = <logging.Logger object>
    ow = <owfs.OWFSBinding object>


